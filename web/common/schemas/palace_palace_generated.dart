// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_local_variable

library palace;

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class CardType {
  final int value;
  const CardType._(this.value);

  factory CardType.fromValue(int value) {
    if (value == null) value = 0;
    if (!values.containsKey(value)) {
      throw new StateError('Invalid value $value for bit flag enum CardType');
    }
    return values[value];
  }

  static const int minValue = 0;
  static const int maxValue = 7;
  static bool containsValue(int value) => values.containsKey(value);

  static const CardType BASIC = const CardType._(0);
  static const CardType REVERSE = const CardType._(1);
  static const CardType BOMB = const CardType._(2);
  static const CardType HIGHER_LOWER = const CardType._(3);
  static const CardType WILD = const CardType._(4);
  static const CardType TOP_SWAP = const CardType._(5);
  static const CardType HAND_SWAP = const CardType._(6);
  static const CardType DISCARD_OR_ROCK = const CardType._(7);
  static get values => {0: BASIC,1: REVERSE,2: BOMB,3: HIGHER_LOWER,4: WILD,5: TOP_SWAP,6: HAND_SWAP,7: DISCARD_OR_ROCK,};

  static const fb.Reader<CardType> reader = const _CardTypeReader();

  @override
  String toString() {
    return 'CardType{value: $value}';
  }
}

class _CardTypeReader extends fb.Reader<CardType> {
  const _CardTypeReader();

  @override
  int get size => 1;

  @override
  CardType read(fb.BufferContext bc, int offset) =>
      new CardType.fromValue(const fb.Int8Reader().read(bc, offset));
}

class HigherLowerChoiceType {
  final int value;
  const HigherLowerChoiceType._(this.value);

  factory HigherLowerChoiceType.fromValue(int value) {
    if (value == null) value = 0;
    if (!values.containsKey(value)) {
      throw new StateError('Invalid value $value for bit flag enum HigherLowerChoiceType');
    }
    return values[value];
  }

  static const int minValue = 0;
  static const int maxValue = 1;
  static bool containsValue(int value) => values.containsKey(value);

  static const HigherLowerChoiceType HIGHER = const HigherLowerChoiceType._(0);
  static const HigherLowerChoiceType LOWER = const HigherLowerChoiceType._(1);
  static get values => {0: HIGHER,1: LOWER,};

  static const fb.Reader<HigherLowerChoiceType> reader = const _HigherLowerChoiceTypeReader();

  @override
  String toString() {
    return 'HigherLowerChoiceType{value: $value}';
  }
}

class _HigherLowerChoiceTypeReader extends fb.Reader<HigherLowerChoiceType> {
  const _HigherLowerChoiceTypeReader();

  @override
  int get size => 1;

  @override
  HigherLowerChoiceType read(fb.BufferContext bc, int offset) =>
      new HigherLowerChoiceType.fromValue(const fb.Int8Reader().read(bc, offset));
}

class MessageType {
  final int value;
  const MessageType._(this.value);

  factory MessageType.fromValue(int value) {
    if (value == null) value = 0;
    if (!values.containsKey(value)) {
      throw new StateError('Invalid value $value for bit flag enum MessageType');
    }
    return values[value];
  }

  static const int minValue = 0;
  static const int maxValue = 41;
  static bool containsValue(int value) => values.containsKey(value);

  static const MessageType ERROR = const MessageType._(0);
  static const MessageType LOGIN_SUCCESSFUL = const MessageType._(1);
  static const MessageType FRIEND_REQUEST = const MessageType._(2);
  static const MessageType MATCH_INVITE = const MessageType._(3);
  static const MessageType MATCH_INVITE_CANCEL = const MessageType._(4);
  static const MessageType MATCH_START = const MessageType._(5);
  static const MessageType FIRST_DEAL_TOWER_INFO = const MessageType._(6);
  static const MessageType SECOND_DEAL_TOWER_INFO = const MessageType._(7);
  static const MessageType FINAL_DEAL_INFO = const MessageType._(8);
  static const MessageType TOWER_CARD_IDS_TO_HAND = const MessageType._(9);
  static const MessageType SET_SELECTABLE_CARDS = const MessageType._(10);
  static const MessageType SET_MULLIGANABLE_CARDS = const MessageType._(11);
  static const MessageType CLEAR_SELECTABLE_CARDS = const MessageType._(12);
  static const MessageType DRAW_INFO = const MessageType._(13);
  static const MessageType PLAY_FROM_HAND_INFO = const MessageType._(14);
  static const MessageType PICK_UP_PILE_INFO = const MessageType._(15);
  static const MessageType DISCARD_INFO = const MessageType._(16);
  static const MessageType REQUEST_HANDSWAP_CHOICE = const MessageType._(17);
  static const MessageType REQUEST_TOPSWAP_CHOICE = const MessageType._(18);
  static const MessageType REQUEST_HIGHERLOWER_CHOICE = const MessageType._(19);
  static const MessageType ACTIVE_PLAYER_INDEX = const MessageType._(20);
  static const MessageType FRIEND_ITEM_INFO = const MessageType._(21);
  static const MessageType LOBBY_INFO = const MessageType._(22);
  static const MessageType LOGOUT_SUCCESSFUL = const MessageType._(23);
  static const MessageType CHANGE_DISCARD_TO_ROCK = const MessageType._(24);
  static const MessageType MULLIGAN_TIMER_UPDATE = const MessageType._(25);
  static const MessageType LOGIN = const MessageType._(26);
  static const MessageType REGISTER = const MessageType._(27);
  static const MessageType ADD_FRIEND = const MessageType._(28);
  static const MessageType ACCEPT_FRIEND_REQUEST = const MessageType._(29);
  static const MessageType SEND_MATCH_INVITE = const MessageType._(30);
  static const MessageType MATCH_ACCEPT = const MessageType._(31);
  static const MessageType MATCH_DECLINE = const MessageType._(32);
  static const MessageType USER_PLAY = const MessageType._(33);
  static const MessageType HANDSWAP_CHOICE = const MessageType._(34);
  static const MessageType TOPSWAP_CHOICE = const MessageType._(35);
  static const MessageType HIGHERLOWER_CHOICE = const MessageType._(36);
  static const MessageType DECLINE_FRIEND_REQUEST = const MessageType._(37);
  static const MessageType START = const MessageType._(38);
  static const MessageType REQUEST_PICK_UP = const MessageType._(39);
  static const MessageType QUICK_JOIN = const MessageType._(40);
  static const MessageType LEAVE_GAME = const MessageType._(41);
  static get values => {0: ERROR,1: LOGIN_SUCCESSFUL,2: FRIEND_REQUEST,3: MATCH_INVITE,4: MATCH_INVITE_CANCEL,5: MATCH_START,6: FIRST_DEAL_TOWER_INFO,7: SECOND_DEAL_TOWER_INFO,8: FINAL_DEAL_INFO,9: TOWER_CARD_IDS_TO_HAND,10: SET_SELECTABLE_CARDS,11: SET_MULLIGANABLE_CARDS,12: CLEAR_SELECTABLE_CARDS,13: DRAW_INFO,14: PLAY_FROM_HAND_INFO,15: PICK_UP_PILE_INFO,16: DISCARD_INFO,17: REQUEST_HANDSWAP_CHOICE,18: REQUEST_TOPSWAP_CHOICE,19: REQUEST_HIGHERLOWER_CHOICE,20: ACTIVE_PLAYER_INDEX,21: FRIEND_ITEM_INFO,22: LOBBY_INFO,23: LOGOUT_SUCCESSFUL,24: CHANGE_DISCARD_TO_ROCK,25: MULLIGAN_TIMER_UPDATE,26: LOGIN,27: REGISTER,28: ADD_FRIEND,29: ACCEPT_FRIEND_REQUEST,30: SEND_MATCH_INVITE,31: MATCH_ACCEPT,32: MATCH_DECLINE,33: USER_PLAY,34: HANDSWAP_CHOICE,35: TOPSWAP_CHOICE,36: HIGHERLOWER_CHOICE,37: DECLINE_FRIEND_REQUEST,38: START,39: REQUEST_PICK_UP,40: QUICK_JOIN,41: LEAVE_GAME,};

  static const fb.Reader<MessageType> reader = const _MessageTypeReader();

  @override
  String toString() {
    return 'MessageType{value: $value}';
  }
}

class _MessageTypeReader extends fb.Reader<MessageType> {
  const _MessageTypeReader();

  @override
  int get size => 1;

  @override
  MessageType read(fb.BufferContext bc, int offset) =>
      new MessageType.fromValue(const fb.Int8Reader().read(bc, offset));
}

class AnyTypeId {
  final int value;
  const AnyTypeId._(this.value);

  factory AnyTypeId.fromValue(int value) {
    if (value == null) value = 0;
    if (!values.containsKey(value)) {
      throw new StateError('Invalid value $value for bit flag enum AnyTypeId');
    }
    return values[value];
  }

  static const int minValue = 0;
  static const int maxValue = 22;
  static bool containsValue(int value) => values.containsKey(value);

  static const AnyTypeId NONE = const AnyTypeId._(0);
  static const AnyTypeId Card = const AnyTypeId._(1);
  static const AnyTypeId Tower = const AnyTypeId._(2);
  static const AnyTypeId CardIDs = const AnyTypeId._(3);
  static const AnyTypeId HigherLowerChoice = const AnyTypeId._(4);
  static const AnyTypeId DealTowerInfo = const AnyTypeId._(5);
  static const AnyTypeId SecondDealTowerInfo = const AnyTypeId._(6);
  static const AnyTypeId PlayFromHandInfo = const AnyTypeId._(7);
  static const AnyTypeId DiscardInfo = const AnyTypeId._(8);
  static const AnyTypeId DrawInfo = const AnyTypeId._(9);
  static const AnyTypeId PickUpPileInfo = const AnyTypeId._(10);
  static const AnyTypeId Hand = const AnyTypeId._(11);
  static const AnyTypeId TowerCardsToHandInfo = const AnyTypeId._(12);
  static const AnyTypeId FinalDealInfo = const AnyTypeId._(13);
  static const AnyTypeId HandSwapInfo = const AnyTypeId._(14);
  static const AnyTypeId LoginCredentials = const AnyTypeId._(15);
  static const AnyTypeId PlayerEntry = const AnyTypeId._(16);
  static const AnyTypeId LobbyInfo = const AnyTypeId._(17);
  static const AnyTypeId UserIDs = const AnyTypeId._(18);
  static const AnyTypeId SimpleInfo = const AnyTypeId._(19);
  static const AnyTypeId ActivePlayerIndex = const AnyTypeId._(20);
  static const AnyTypeId FriendItemInfo = const AnyTypeId._(21);
  static const AnyTypeId RequestHigherLowerChoiceInfo = const AnyTypeId._(22);
  static get values => {0: NONE,1: Card,2: Tower,3: CardIDs,4: HigherLowerChoice,5: DealTowerInfo,6: SecondDealTowerInfo,7: PlayFromHandInfo,8: DiscardInfo,9: DrawInfo,10: PickUpPileInfo,11: Hand,12: TowerCardsToHandInfo,13: FinalDealInfo,14: HandSwapInfo,15: LoginCredentials,16: PlayerEntry,17: LobbyInfo,18: UserIDs,19: SimpleInfo,20: ActivePlayerIndex,21: FriendItemInfo,22: RequestHigherLowerChoiceInfo,};

  static const fb.Reader<AnyTypeId> reader = const _AnyTypeIdReader();

  @override
  String toString() {
    return 'AnyTypeId{value: $value}';
  }
}

class _AnyTypeIdReader extends fb.Reader<AnyTypeId> {
  const _AnyTypeIdReader();

  @override
  int get size => 1;

  @override
  AnyTypeId read(fb.BufferContext bc, int offset) =>
      new AnyTypeId.fromValue(const fb.Uint8Reader().read(bc, offset));
}

class Card {
  Card._(this._bc, this._bcOffset);
  factory Card(List<int> bytes) {
    fb.BufferContext rootRef = new fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Card> reader = const _CardReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  CardType get type => new CardType.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 4, 0));
  String get id => const fb.StringReader().vTableGet(_bc, _bcOffset, 6, null);
  int get value => const fb.Int8Reader().vTableGet(_bc, _bcOffset, 8, 0);
  bool get hidden => const fb.BoolReader().vTableGet(_bc, _bcOffset, 10, false);
  int get playerIndex => const fb.Int8Reader().vTableGet(_bc, _bcOffset, 12, 0);
  bool get activated => const fb.BoolReader().vTableGet(_bc, _bcOffset, 14, false);

  @override
  String toString() {
    return 'Card{type: $type, id: $id, value: $value, hidden: $hidden, playerIndex: $playerIndex, activated: $activated}';
  }
}

class _CardReader extends fb.TableReader<Card> {
  const _CardReader();

  @override
  Card createObject(fb.BufferContext bc, int offset) => 
    new Card._(bc, offset);
}

class CardBuilder {
  CardBuilder(this.fbBuilder) {
    assert(fbBuilder != null);
  }

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable();
  }

  int addType(CardType type) {
    fbBuilder.addInt8(0, type?.value);
    return fbBuilder.offset;
  }
  int addIdOffset(int offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addValue(int value) {
    fbBuilder.addInt8(2, value);
    return fbBuilder.offset;
  }
  int addHidden(bool hidden) {
    fbBuilder.addBool(3, hidden);
    return fbBuilder.offset;
  }
  int addPlayerIndex(int playerIndex) {
    fbBuilder.addInt8(4, playerIndex);
    return fbBuilder.offset;
  }
  int addActivated(bool activated) {
    fbBuilder.addBool(5, activated);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class CardObjectBuilder extends fb.ObjectBuilder {
  final CardType _type;
  final String _id;
  final int _value;
  final bool _hidden;
  final int _playerIndex;
  final bool _activated;

  CardObjectBuilder({
    CardType type,
    String id,
    int value,
    bool hidden,
    int playerIndex,
    bool activated,
  })
      : _type = type,
        _id = id,
        _value = value,
        _hidden = hidden,
        _playerIndex = playerIndex,
        _activated = activated;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(
    fb.Builder fbBuilder) {
    assert(fbBuilder != null);
    final int idOffset = fbBuilder.writeString(_id);

    fbBuilder.startTable();
    fbBuilder.addInt8(0, _type?.value);
    if (idOffset != null) {
      fbBuilder.addOffset(1, idOffset);
    }
    fbBuilder.addInt8(2, _value);
    fbBuilder.addBool(3, _hidden);
    fbBuilder.addInt8(4, _playerIndex);
    fbBuilder.addBool(5, _activated);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String fileIdentifier]) {
    fb.Builder fbBuilder = new fb.Builder();
    int offset = finish(fbBuilder);
    return fbBuilder.finish(offset, fileIdentifier);
  }
}
class Tower {
  Tower._(this._bc, this._bcOffset);
  factory Tower(List<int> bytes) {
    fb.BufferContext rootRef = new fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Tower> reader = const _TowerReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<Card> get cards => const fb.ListReader<Card>(Card.reader).vTableGet(_bc, _bcOffset, 4, null);

  @override
  String toString() {
    return 'Tower{cards: $cards}';
  }
}

class _TowerReader extends fb.TableReader<Tower> {
  const _TowerReader();

  @override
  Tower createObject(fb.BufferContext bc, int offset) => 
    new Tower._(bc, offset);
}

class TowerBuilder {
  TowerBuilder(this.fbBuilder) {
    assert(fbBuilder != null);
  }

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable();
  }

  int addCardsOffset(int offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class TowerObjectBuilder extends fb.ObjectBuilder {
  final List<CardObjectBuilder> _cards;

  TowerObjectBuilder({
    List<CardObjectBuilder> cards,
  })
      : _cards = cards;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(
    fb.Builder fbBuilder) {
    assert(fbBuilder != null);
    final int cardsOffset = _cards?.isNotEmpty == true
        ? fbBuilder.writeList(_cards.map((b) => b.getOrCreateOffset(fbBuilder)).toList())
        : null;

    fbBuilder.startTable();
    if (cardsOffset != null) {
      fbBuilder.addOffset(0, cardsOffset);
    }
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String fileIdentifier]) {
    fb.Builder fbBuilder = new fb.Builder();
    int offset = finish(fbBuilder);
    return fbBuilder.finish(offset, fileIdentifier);
  }
}
class CardIDs {
  CardIDs._(this._bc, this._bcOffset);
  factory CardIDs(List<int> bytes) {
    fb.BufferContext rootRef = new fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<CardIDs> reader = const _CardIDsReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<String> get ids => const fb.ListReader<String>(const fb.StringReader()).vTableGet(_bc, _bcOffset, 4, null);

  @override
  String toString() {
    return 'CardIDs{ids: $ids}';
  }
}

class _CardIDsReader extends fb.TableReader<CardIDs> {
  const _CardIDsReader();

  @override
  CardIDs createObject(fb.BufferContext bc, int offset) => 
    new CardIDs._(bc, offset);
}

class CardIDsBuilder {
  CardIDsBuilder(this.fbBuilder) {
    assert(fbBuilder != null);
  }

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable();
  }

  int addIdsOffset(int offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class CardIDsObjectBuilder extends fb.ObjectBuilder {
  final List<String> _ids;

  CardIDsObjectBuilder({
    List<String> ids,
  })
      : _ids = ids;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(
    fb.Builder fbBuilder) {
    assert(fbBuilder != null);
    final int idsOffset = _ids?.isNotEmpty == true
        ? fbBuilder.writeList(_ids.map((b) => fbBuilder.writeString(b)).toList())
        : null;

    fbBuilder.startTable();
    if (idsOffset != null) {
      fbBuilder.addOffset(0, idsOffset);
    }
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String fileIdentifier]) {
    fb.Builder fbBuilder = new fb.Builder();
    int offset = finish(fbBuilder);
    return fbBuilder.finish(offset, fileIdentifier);
  }
}
class HigherLowerChoice {
  HigherLowerChoice._(this._bc, this._bcOffset);
  factory HigherLowerChoice(List<int> bytes) {
    fb.BufferContext rootRef = new fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<HigherLowerChoice> reader = const _HigherLowerChoiceReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  HigherLowerChoiceType get type => new HigherLowerChoiceType.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 4, 0));
  int get value => const fb.Int8Reader().vTableGet(_bc, _bcOffset, 6, 0);

  @override
  String toString() {
    return 'HigherLowerChoice{type: $type, value: $value}';
  }
}

class _HigherLowerChoiceReader extends fb.TableReader<HigherLowerChoice> {
  const _HigherLowerChoiceReader();

  @override
  HigherLowerChoice createObject(fb.BufferContext bc, int offset) => 
    new HigherLowerChoice._(bc, offset);
}

class HigherLowerChoiceBuilder {
  HigherLowerChoiceBuilder(this.fbBuilder) {
    assert(fbBuilder != null);
  }

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable();
  }

  int addType(HigherLowerChoiceType type) {
    fbBuilder.addInt8(0, type?.value);
    return fbBuilder.offset;
  }
  int addValue(int value) {
    fbBuilder.addInt8(1, value);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class HigherLowerChoiceObjectBuilder extends fb.ObjectBuilder {
  final HigherLowerChoiceType _type;
  final int _value;

  HigherLowerChoiceObjectBuilder({
    HigherLowerChoiceType type,
    int value,
  })
      : _type = type,
        _value = value;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(
    fb.Builder fbBuilder) {
    assert(fbBuilder != null);

    fbBuilder.startTable();
    fbBuilder.addInt8(0, _type?.value);
    fbBuilder.addInt8(1, _value);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String fileIdentifier]) {
    fb.Builder fbBuilder = new fb.Builder();
    int offset = finish(fbBuilder);
    return fbBuilder.finish(offset, fileIdentifier);
  }
}
class DealTowerInfo {
  DealTowerInfo._(this._bc, this._bcOffset);
  factory DealTowerInfo(List<int> bytes) {
    fb.BufferContext rootRef = new fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<DealTowerInfo> reader = const _DealTowerInfoReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<Tower> get topTowers => const fb.ListReader<Tower>(Tower.reader).vTableGet(_bc, _bcOffset, 4, null);
  List<Tower> get bottomTowers => const fb.ListReader<Tower>(Tower.reader).vTableGet(_bc, _bcOffset, 6, null);

  @override
  String toString() {
    return 'DealTowerInfo{topTowers: $topTowers, bottomTowers: $bottomTowers}';
  }
}

class _DealTowerInfoReader extends fb.TableReader<DealTowerInfo> {
  const _DealTowerInfoReader();

  @override
  DealTowerInfo createObject(fb.BufferContext bc, int offset) => 
    new DealTowerInfo._(bc, offset);
}

class DealTowerInfoBuilder {
  DealTowerInfoBuilder(this.fbBuilder) {
    assert(fbBuilder != null);
  }

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable();
  }

  int addTopTowersOffset(int offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addBottomTowersOffset(int offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class DealTowerInfoObjectBuilder extends fb.ObjectBuilder {
  final List<TowerObjectBuilder> _topTowers;
  final List<TowerObjectBuilder> _bottomTowers;

  DealTowerInfoObjectBuilder({
    List<TowerObjectBuilder> topTowers,
    List<TowerObjectBuilder> bottomTowers,
  })
      : _topTowers = topTowers,
        _bottomTowers = bottomTowers;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(
    fb.Builder fbBuilder) {
    assert(fbBuilder != null);
    final int topTowersOffset = _topTowers?.isNotEmpty == true
        ? fbBuilder.writeList(_topTowers.map((b) => b.getOrCreateOffset(fbBuilder)).toList())
        : null;
    final int bottomTowersOffset = _bottomTowers?.isNotEmpty == true
        ? fbBuilder.writeList(_bottomTowers.map((b) => b.getOrCreateOffset(fbBuilder)).toList())
        : null;

    fbBuilder.startTable();
    if (topTowersOffset != null) {
      fbBuilder.addOffset(0, topTowersOffset);
    }
    if (bottomTowersOffset != null) {
      fbBuilder.addOffset(1, bottomTowersOffset);
    }
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String fileIdentifier]) {
    fb.Builder fbBuilder = new fb.Builder();
    int offset = finish(fbBuilder);
    return fbBuilder.finish(offset, fileIdentifier);
  }
}
class SecondDealTowerInfo {
  SecondDealTowerInfo._(this._bc, this._bcOffset);
  factory SecondDealTowerInfo(List<int> bytes) {
    fb.BufferContext rootRef = new fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<SecondDealTowerInfo> reader = const _SecondDealTowerInfoReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<Tower> get topTowers => const fb.ListReader<Tower>(Tower.reader).vTableGet(_bc, _bcOffset, 4, null);

  @override
  String toString() {
    return 'SecondDealTowerInfo{topTowers: $topTowers}';
  }
}

class _SecondDealTowerInfoReader extends fb.TableReader<SecondDealTowerInfo> {
  const _SecondDealTowerInfoReader();

  @override
  SecondDealTowerInfo createObject(fb.BufferContext bc, int offset) => 
    new SecondDealTowerInfo._(bc, offset);
}

class SecondDealTowerInfoBuilder {
  SecondDealTowerInfoBuilder(this.fbBuilder) {
    assert(fbBuilder != null);
  }

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable();
  }

  int addTopTowersOffset(int offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class SecondDealTowerInfoObjectBuilder extends fb.ObjectBuilder {
  final List<TowerObjectBuilder> _topTowers;

  SecondDealTowerInfoObjectBuilder({
    List<TowerObjectBuilder> topTowers,
  })
      : _topTowers = topTowers;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(
    fb.Builder fbBuilder) {
    assert(fbBuilder != null);
    final int topTowersOffset = _topTowers?.isNotEmpty == true
        ? fbBuilder.writeList(_topTowers.map((b) => b.getOrCreateOffset(fbBuilder)).toList())
        : null;

    fbBuilder.startTable();
    if (topTowersOffset != null) {
      fbBuilder.addOffset(0, topTowersOffset);
    }
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String fileIdentifier]) {
    fb.Builder fbBuilder = new fb.Builder();
    int offset = finish(fbBuilder);
    return fbBuilder.finish(offset, fileIdentifier);
  }
}
class PlayFromHandInfo {
  PlayFromHandInfo._(this._bc, this._bcOffset);
  factory PlayFromHandInfo(List<int> bytes) {
    fb.BufferContext rootRef = new fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<PlayFromHandInfo> reader = const _PlayFromHandInfoReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get userIndex => const fb.Int8Reader().vTableGet(_bc, _bcOffset, 4, 0);
  List<Card> get cards => const fb.ListReader<Card>(Card.reader).vTableGet(_bc, _bcOffset, 6, null);

  @override
  String toString() {
    return 'PlayFromHandInfo{userIndex: $userIndex, cards: $cards}';
  }
}

class _PlayFromHandInfoReader extends fb.TableReader<PlayFromHandInfo> {
  const _PlayFromHandInfoReader();

  @override
  PlayFromHandInfo createObject(fb.BufferContext bc, int offset) => 
    new PlayFromHandInfo._(bc, offset);
}

class PlayFromHandInfoBuilder {
  PlayFromHandInfoBuilder(this.fbBuilder) {
    assert(fbBuilder != null);
  }

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable();
  }

  int addUserIndex(int userIndex) {
    fbBuilder.addInt8(0, userIndex);
    return fbBuilder.offset;
  }
  int addCardsOffset(int offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PlayFromHandInfoObjectBuilder extends fb.ObjectBuilder {
  final int _userIndex;
  final List<CardObjectBuilder> _cards;

  PlayFromHandInfoObjectBuilder({
    int userIndex,
    List<CardObjectBuilder> cards,
  })
      : _userIndex = userIndex,
        _cards = cards;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(
    fb.Builder fbBuilder) {
    assert(fbBuilder != null);
    final int cardsOffset = _cards?.isNotEmpty == true
        ? fbBuilder.writeList(_cards.map((b) => b.getOrCreateOffset(fbBuilder)).toList())
        : null;

    fbBuilder.startTable();
    fbBuilder.addInt8(0, _userIndex);
    if (cardsOffset != null) {
      fbBuilder.addOffset(1, cardsOffset);
    }
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String fileIdentifier]) {
    fb.Builder fbBuilder = new fb.Builder();
    int offset = finish(fbBuilder);
    return fbBuilder.finish(offset, fileIdentifier);
  }
}
class DiscardInfo {
  DiscardInfo._(this._bc, this._bcOffset);
  factory DiscardInfo(List<int> bytes) {
    fb.BufferContext rootRef = new fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<DiscardInfo> reader = const _DiscardInfoReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<Card> get cards => const fb.ListReader<Card>(Card.reader).vTableGet(_bc, _bcOffset, 4, null);

  @override
  String toString() {
    return 'DiscardInfo{cards: $cards}';
  }
}

class _DiscardInfoReader extends fb.TableReader<DiscardInfo> {
  const _DiscardInfoReader();

  @override
  DiscardInfo createObject(fb.BufferContext bc, int offset) => 
    new DiscardInfo._(bc, offset);
}

class DiscardInfoBuilder {
  DiscardInfoBuilder(this.fbBuilder) {
    assert(fbBuilder != null);
  }

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable();
  }

  int addCardsOffset(int offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class DiscardInfoObjectBuilder extends fb.ObjectBuilder {
  final List<CardObjectBuilder> _cards;

  DiscardInfoObjectBuilder({
    List<CardObjectBuilder> cards,
  })
      : _cards = cards;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(
    fb.Builder fbBuilder) {
    assert(fbBuilder != null);
    final int cardsOffset = _cards?.isNotEmpty == true
        ? fbBuilder.writeList(_cards.map((b) => b.getOrCreateOffset(fbBuilder)).toList())
        : null;

    fbBuilder.startTable();
    if (cardsOffset != null) {
      fbBuilder.addOffset(0, cardsOffset);
    }
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String fileIdentifier]) {
    fb.Builder fbBuilder = new fb.Builder();
    int offset = finish(fbBuilder);
    return fbBuilder.finish(offset, fileIdentifier);
  }
}
class DrawInfo {
  DrawInfo._(this._bc, this._bcOffset);
  factory DrawInfo(List<int> bytes) {
    fb.BufferContext rootRef = new fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<DrawInfo> reader = const _DrawInfoReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get userIndex => const fb.Int8Reader().vTableGet(_bc, _bcOffset, 4, 0);
  List<Card> get cards => const fb.ListReader<Card>(Card.reader).vTableGet(_bc, _bcOffset, 6, null);

  @override
  String toString() {
    return 'DrawInfo{userIndex: $userIndex, cards: $cards}';
  }
}

class _DrawInfoReader extends fb.TableReader<DrawInfo> {
  const _DrawInfoReader();

  @override
  DrawInfo createObject(fb.BufferContext bc, int offset) => 
    new DrawInfo._(bc, offset);
}

class DrawInfoBuilder {
  DrawInfoBuilder(this.fbBuilder) {
    assert(fbBuilder != null);
  }

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable();
  }

  int addUserIndex(int userIndex) {
    fbBuilder.addInt8(0, userIndex);
    return fbBuilder.offset;
  }
  int addCardsOffset(int offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class DrawInfoObjectBuilder extends fb.ObjectBuilder {
  final int _userIndex;
  final List<CardObjectBuilder> _cards;

  DrawInfoObjectBuilder({
    int userIndex,
    List<CardObjectBuilder> cards,
  })
      : _userIndex = userIndex,
        _cards = cards;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(
    fb.Builder fbBuilder) {
    assert(fbBuilder != null);
    final int cardsOffset = _cards?.isNotEmpty == true
        ? fbBuilder.writeList(_cards.map((b) => b.getOrCreateOffset(fbBuilder)).toList())
        : null;

    fbBuilder.startTable();
    fbBuilder.addInt8(0, _userIndex);
    if (cardsOffset != null) {
      fbBuilder.addOffset(1, cardsOffset);
    }
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String fileIdentifier]) {
    fb.Builder fbBuilder = new fb.Builder();
    int offset = finish(fbBuilder);
    return fbBuilder.finish(offset, fileIdentifier);
  }
}
class PickUpPileInfo {
  PickUpPileInfo._(this._bc, this._bcOffset);
  factory PickUpPileInfo(List<int> bytes) {
    fb.BufferContext rootRef = new fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<PickUpPileInfo> reader = const _PickUpPileInfoReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get userIndex => const fb.Int8Reader().vTableGet(_bc, _bcOffset, 4, 0);
  List<Card> get cards => const fb.ListReader<Card>(Card.reader).vTableGet(_bc, _bcOffset, 6, null);

  @override
  String toString() {
    return 'PickUpPileInfo{userIndex: $userIndex, cards: $cards}';
  }
}

class _PickUpPileInfoReader extends fb.TableReader<PickUpPileInfo> {
  const _PickUpPileInfoReader();

  @override
  PickUpPileInfo createObject(fb.BufferContext bc, int offset) => 
    new PickUpPileInfo._(bc, offset);
}

class PickUpPileInfoBuilder {
  PickUpPileInfoBuilder(this.fbBuilder) {
    assert(fbBuilder != null);
  }

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable();
  }

  int addUserIndex(int userIndex) {
    fbBuilder.addInt8(0, userIndex);
    return fbBuilder.offset;
  }
  int addCardsOffset(int offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PickUpPileInfoObjectBuilder extends fb.ObjectBuilder {
  final int _userIndex;
  final List<CardObjectBuilder> _cards;

  PickUpPileInfoObjectBuilder({
    int userIndex,
    List<CardObjectBuilder> cards,
  })
      : _userIndex = userIndex,
        _cards = cards;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(
    fb.Builder fbBuilder) {
    assert(fbBuilder != null);
    final int cardsOffset = _cards?.isNotEmpty == true
        ? fbBuilder.writeList(_cards.map((b) => b.getOrCreateOffset(fbBuilder)).toList())
        : null;

    fbBuilder.startTable();
    fbBuilder.addInt8(0, _userIndex);
    if (cardsOffset != null) {
      fbBuilder.addOffset(1, cardsOffset);
    }
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String fileIdentifier]) {
    fb.Builder fbBuilder = new fb.Builder();
    int offset = finish(fbBuilder);
    return fbBuilder.finish(offset, fileIdentifier);
  }
}
class Hand {
  Hand._(this._bc, this._bcOffset);
  factory Hand(List<int> bytes) {
    fb.BufferContext rootRef = new fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Hand> reader = const _HandReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<Card> get cards => const fb.ListReader<Card>(Card.reader).vTableGet(_bc, _bcOffset, 4, null);

  @override
  String toString() {
    return 'Hand{cards: $cards}';
  }
}

class _HandReader extends fb.TableReader<Hand> {
  const _HandReader();

  @override
  Hand createObject(fb.BufferContext bc, int offset) => 
    new Hand._(bc, offset);
}

class HandBuilder {
  HandBuilder(this.fbBuilder) {
    assert(fbBuilder != null);
  }

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable();
  }

  int addCardsOffset(int offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class HandObjectBuilder extends fb.ObjectBuilder {
  final List<CardObjectBuilder> _cards;

  HandObjectBuilder({
    List<CardObjectBuilder> cards,
  })
      : _cards = cards;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(
    fb.Builder fbBuilder) {
    assert(fbBuilder != null);
    final int cardsOffset = _cards?.isNotEmpty == true
        ? fbBuilder.writeList(_cards.map((b) => b.getOrCreateOffset(fbBuilder)).toList())
        : null;

    fbBuilder.startTable();
    if (cardsOffset != null) {
      fbBuilder.addOffset(0, cardsOffset);
    }
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String fileIdentifier]) {
    fb.Builder fbBuilder = new fb.Builder();
    int offset = finish(fbBuilder);
    return fbBuilder.finish(offset, fileIdentifier);
  }
}
class TowerCardsToHandInfo {
  TowerCardsToHandInfo._(this._bc, this._bcOffset);
  factory TowerCardsToHandInfo(List<int> bytes) {
    fb.BufferContext rootRef = new fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<TowerCardsToHandInfo> reader = const _TowerCardsToHandInfoReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get userIndex => const fb.Int8Reader().vTableGet(_bc, _bcOffset, 4, 0);
  List<String> get cardIDs => const fb.ListReader<String>(const fb.StringReader()).vTableGet(_bc, _bcOffset, 6, null);

  @override
  String toString() {
    return 'TowerCardsToHandInfo{userIndex: $userIndex, cardIDs: $cardIDs}';
  }
}

class _TowerCardsToHandInfoReader extends fb.TableReader<TowerCardsToHandInfo> {
  const _TowerCardsToHandInfoReader();

  @override
  TowerCardsToHandInfo createObject(fb.BufferContext bc, int offset) => 
    new TowerCardsToHandInfo._(bc, offset);
}

class TowerCardsToHandInfoBuilder {
  TowerCardsToHandInfoBuilder(this.fbBuilder) {
    assert(fbBuilder != null);
  }

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable();
  }

  int addUserIndex(int userIndex) {
    fbBuilder.addInt8(0, userIndex);
    return fbBuilder.offset;
  }
  int addCardIDsOffset(int offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class TowerCardsToHandInfoObjectBuilder extends fb.ObjectBuilder {
  final int _userIndex;
  final List<String> _cardIDs;

  TowerCardsToHandInfoObjectBuilder({
    int userIndex,
    List<String> cardIDs,
  })
      : _userIndex = userIndex,
        _cardIDs = cardIDs;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(
    fb.Builder fbBuilder) {
    assert(fbBuilder != null);
    final int cardIDsOffset = _cardIDs?.isNotEmpty == true
        ? fbBuilder.writeList(_cardIDs.map((b) => fbBuilder.writeString(b)).toList())
        : null;

    fbBuilder.startTable();
    fbBuilder.addInt8(0, _userIndex);
    if (cardIDsOffset != null) {
      fbBuilder.addOffset(1, cardIDsOffset);
    }
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String fileIdentifier]) {
    fb.Builder fbBuilder = new fb.Builder();
    int offset = finish(fbBuilder);
    return fbBuilder.finish(offset, fileIdentifier);
  }
}
class FinalDealInfo {
  FinalDealInfo._(this._bc, this._bcOffset);
  factory FinalDealInfo(List<int> bytes) {
    fb.BufferContext rootRef = new fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<FinalDealInfo> reader = const _FinalDealInfoReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<Hand> get hands => const fb.ListReader<Hand>(Hand.reader).vTableGet(_bc, _bcOffset, 4, null);

  @override
  String toString() {
    return 'FinalDealInfo{hands: $hands}';
  }
}

class _FinalDealInfoReader extends fb.TableReader<FinalDealInfo> {
  const _FinalDealInfoReader();

  @override
  FinalDealInfo createObject(fb.BufferContext bc, int offset) => 
    new FinalDealInfo._(bc, offset);
}

class FinalDealInfoBuilder {
  FinalDealInfoBuilder(this.fbBuilder) {
    assert(fbBuilder != null);
  }

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable();
  }

  int addHandsOffset(int offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class FinalDealInfoObjectBuilder extends fb.ObjectBuilder {
  final List<HandObjectBuilder> _hands;

  FinalDealInfoObjectBuilder({
    List<HandObjectBuilder> hands,
  })
      : _hands = hands;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(
    fb.Builder fbBuilder) {
    assert(fbBuilder != null);
    final int handsOffset = _hands?.isNotEmpty == true
        ? fbBuilder.writeList(_hands.map((b) => b.getOrCreateOffset(fbBuilder)).toList())
        : null;

    fbBuilder.startTable();
    if (handsOffset != null) {
      fbBuilder.addOffset(0, handsOffset);
    }
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String fileIdentifier]) {
    fb.Builder fbBuilder = new fb.Builder();
    int offset = finish(fbBuilder);
    return fbBuilder.finish(offset, fileIdentifier);
  }
}
class TopSwapInfo {
  TopSwapInfo._(this._bc, this._bcOffset);
  factory TopSwapInfo(List<int> bytes) {
    fb.BufferContext rootRef = new fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<TopSwapInfo> reader = const _TopSwapInfoReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  Card get card1 => Card.reader.vTableGet(_bc, _bcOffset, 4, null);
  Card get card2 => Card.reader.vTableGet(_bc, _bcOffset, 6, null);

  @override
  String toString() {
    return 'TopSwapInfo{card1: $card1, card2: $card2}';
  }
}

class _TopSwapInfoReader extends fb.TableReader<TopSwapInfo> {
  const _TopSwapInfoReader();

  @override
  TopSwapInfo createObject(fb.BufferContext bc, int offset) => 
    new TopSwapInfo._(bc, offset);
}

class TopSwapInfoBuilder {
  TopSwapInfoBuilder(this.fbBuilder) {
    assert(fbBuilder != null);
  }

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable();
  }

  int addCard1Offset(int offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addCard2Offset(int offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class TopSwapInfoObjectBuilder extends fb.ObjectBuilder {
  final CardObjectBuilder _card1;
  final CardObjectBuilder _card2;

  TopSwapInfoObjectBuilder({
    CardObjectBuilder card1,
    CardObjectBuilder card2,
  })
      : _card1 = card1,
        _card2 = card2;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(
    fb.Builder fbBuilder) {
    assert(fbBuilder != null);
    final int card1Offset = _card1?.getOrCreateOffset(fbBuilder);
    final int card2Offset = _card2?.getOrCreateOffset(fbBuilder);

    fbBuilder.startTable();
    if (card1Offset != null) {
      fbBuilder.addOffset(0, card1Offset);
    }
    if (card2Offset != null) {
      fbBuilder.addOffset(1, card2Offset);
    }
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String fileIdentifier]) {
    fb.Builder fbBuilder = new fb.Builder();
    int offset = finish(fbBuilder);
    return fbBuilder.finish(offset, fileIdentifier);
  }
}
class HandSwapInfo {
  HandSwapInfo._(this._bc, this._bcOffset);
  factory HandSwapInfo(List<int> bytes) {
    fb.BufferContext rootRef = new fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<HandSwapInfo> reader = const _HandSwapInfoReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get userIndex1 => const fb.Int8Reader().vTableGet(_bc, _bcOffset, 4, 0);
  int get userIndex2 => const fb.Int8Reader().vTableGet(_bc, _bcOffset, 6, 0);
  List<Card> get cards1 => const fb.ListReader<Card>(Card.reader).vTableGet(_bc, _bcOffset, 8, null);
  List<Card> get cards2 => const fb.ListReader<Card>(Card.reader).vTableGet(_bc, _bcOffset, 10, null);

  @override
  String toString() {
    return 'HandSwapInfo{userIndex1: $userIndex1, userIndex2: $userIndex2, cards1: $cards1, cards2: $cards2}';
  }
}

class _HandSwapInfoReader extends fb.TableReader<HandSwapInfo> {
  const _HandSwapInfoReader();

  @override
  HandSwapInfo createObject(fb.BufferContext bc, int offset) => 
    new HandSwapInfo._(bc, offset);
}

class HandSwapInfoBuilder {
  HandSwapInfoBuilder(this.fbBuilder) {
    assert(fbBuilder != null);
  }

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable();
  }

  int addUserIndex1(int userIndex1) {
    fbBuilder.addInt8(0, userIndex1);
    return fbBuilder.offset;
  }
  int addUserIndex2(int userIndex2) {
    fbBuilder.addInt8(1, userIndex2);
    return fbBuilder.offset;
  }
  int addCards1Offset(int offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addCards2Offset(int offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class HandSwapInfoObjectBuilder extends fb.ObjectBuilder {
  final int _userIndex1;
  final int _userIndex2;
  final List<CardObjectBuilder> _cards1;
  final List<CardObjectBuilder> _cards2;

  HandSwapInfoObjectBuilder({
    int userIndex1,
    int userIndex2,
    List<CardObjectBuilder> cards1,
    List<CardObjectBuilder> cards2,
  })
      : _userIndex1 = userIndex1,
        _userIndex2 = userIndex2,
        _cards1 = cards1,
        _cards2 = cards2;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(
    fb.Builder fbBuilder) {
    assert(fbBuilder != null);
    final int cards1Offset = _cards1?.isNotEmpty == true
        ? fbBuilder.writeList(_cards1.map((b) => b.getOrCreateOffset(fbBuilder)).toList())
        : null;
    final int cards2Offset = _cards2?.isNotEmpty == true
        ? fbBuilder.writeList(_cards2.map((b) => b.getOrCreateOffset(fbBuilder)).toList())
        : null;

    fbBuilder.startTable();
    fbBuilder.addInt8(0, _userIndex1);
    fbBuilder.addInt8(1, _userIndex2);
    if (cards1Offset != null) {
      fbBuilder.addOffset(2, cards1Offset);
    }
    if (cards2Offset != null) {
      fbBuilder.addOffset(3, cards2Offset);
    }
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String fileIdentifier]) {
    fb.Builder fbBuilder = new fb.Builder();
    int offset = finish(fbBuilder);
    return fbBuilder.finish(offset, fileIdentifier);
  }
}
class LoginCredentials {
  LoginCredentials._(this._bc, this._bcOffset);
  factory LoginCredentials(List<int> bytes) {
    fb.BufferContext rootRef = new fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<LoginCredentials> reader = const _LoginCredentialsReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String get userID => const fb.StringReader().vTableGet(_bc, _bcOffset, 4, null);
  String get passCode => const fb.StringReader().vTableGet(_bc, _bcOffset, 6, null);

  @override
  String toString() {
    return 'LoginCredentials{userID: $userID, passCode: $passCode}';
  }
}

class _LoginCredentialsReader extends fb.TableReader<LoginCredentials> {
  const _LoginCredentialsReader();

  @override
  LoginCredentials createObject(fb.BufferContext bc, int offset) => 
    new LoginCredentials._(bc, offset);
}

class LoginCredentialsBuilder {
  LoginCredentialsBuilder(this.fbBuilder) {
    assert(fbBuilder != null);
  }

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable();
  }

  int addUserIDOffset(int offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addPassCodeOffset(int offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class LoginCredentialsObjectBuilder extends fb.ObjectBuilder {
  final String _userID;
  final String _passCode;

  LoginCredentialsObjectBuilder({
    String userID,
    String passCode,
  })
      : _userID = userID,
        _passCode = passCode;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(
    fb.Builder fbBuilder) {
    assert(fbBuilder != null);
    final int userIDOffset = fbBuilder.writeString(_userID);
    final int passCodeOffset = fbBuilder.writeString(_passCode);

    fbBuilder.startTable();
    if (userIDOffset != null) {
      fbBuilder.addOffset(0, userIDOffset);
    }
    if (passCodeOffset != null) {
      fbBuilder.addOffset(1, passCodeOffset);
    }
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String fileIdentifier]) {
    fb.Builder fbBuilder = new fb.Builder();
    int offset = finish(fbBuilder);
    return fbBuilder.finish(offset, fileIdentifier);
  }
}
class PlayerEntry {
  PlayerEntry._(this._bc, this._bcOffset);
  factory PlayerEntry(List<int> bytes) {
    fb.BufferContext rootRef = new fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<PlayerEntry> reader = const _PlayerEntryReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String get userID => const fb.StringReader().vTableGet(_bc, _bcOffset, 4, null);
  bool get ready => const fb.BoolReader().vTableGet(_bc, _bcOffset, 6, false);

  @override
  String toString() {
    return 'PlayerEntry{userID: $userID, ready: $ready}';
  }
}

class _PlayerEntryReader extends fb.TableReader<PlayerEntry> {
  const _PlayerEntryReader();

  @override
  PlayerEntry createObject(fb.BufferContext bc, int offset) => 
    new PlayerEntry._(bc, offset);
}

class PlayerEntryBuilder {
  PlayerEntryBuilder(this.fbBuilder) {
    assert(fbBuilder != null);
  }

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable();
  }

  int addUserIDOffset(int offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addReady(bool ready) {
    fbBuilder.addBool(1, ready);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PlayerEntryObjectBuilder extends fb.ObjectBuilder {
  final String _userID;
  final bool _ready;

  PlayerEntryObjectBuilder({
    String userID,
    bool ready,
  })
      : _userID = userID,
        _ready = ready;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(
    fb.Builder fbBuilder) {
    assert(fbBuilder != null);
    final int userIDOffset = fbBuilder.writeString(_userID);

    fbBuilder.startTable();
    if (userIDOffset != null) {
      fbBuilder.addOffset(0, userIDOffset);
    }
    fbBuilder.addBool(1, _ready);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String fileIdentifier]) {
    fb.Builder fbBuilder = new fb.Builder();
    int offset = finish(fbBuilder);
    return fbBuilder.finish(offset, fileIdentifier);
  }
}
class LobbyInfo {
  LobbyInfo._(this._bc, this._bcOffset);
  factory LobbyInfo(List<int> bytes) {
    fb.BufferContext rootRef = new fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<LobbyInfo> reader = const _LobbyInfoReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String get host => const fb.StringReader().vTableGet(_bc, _bcOffset, 4, null);
  List<PlayerEntry> get players => const fb.ListReader<PlayerEntry>(PlayerEntry.reader).vTableGet(_bc, _bcOffset, 6, null);
  bool get canStart => const fb.BoolReader().vTableGet(_bc, _bcOffset, 8, false);
  bool get canJoin => const fb.BoolReader().vTableGet(_bc, _bcOffset, 10, false);

  @override
  String toString() {
    return 'LobbyInfo{host: $host, players: $players, canStart: $canStart, canJoin: $canJoin}';
  }
}

class _LobbyInfoReader extends fb.TableReader<LobbyInfo> {
  const _LobbyInfoReader();

  @override
  LobbyInfo createObject(fb.BufferContext bc, int offset) => 
    new LobbyInfo._(bc, offset);
}

class LobbyInfoBuilder {
  LobbyInfoBuilder(this.fbBuilder) {
    assert(fbBuilder != null);
  }

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable();
  }

  int addHostOffset(int offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addPlayersOffset(int offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addCanStart(bool canStart) {
    fbBuilder.addBool(2, canStart);
    return fbBuilder.offset;
  }
  int addCanJoin(bool canJoin) {
    fbBuilder.addBool(3, canJoin);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class LobbyInfoObjectBuilder extends fb.ObjectBuilder {
  final String _host;
  final List<PlayerEntryObjectBuilder> _players;
  final bool _canStart;
  final bool _canJoin;

  LobbyInfoObjectBuilder({
    String host,
    List<PlayerEntryObjectBuilder> players,
    bool canStart,
    bool canJoin,
  })
      : _host = host,
        _players = players,
        _canStart = canStart,
        _canJoin = canJoin;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(
    fb.Builder fbBuilder) {
    assert(fbBuilder != null);
    final int hostOffset = fbBuilder.writeString(_host);
    final int playersOffset = _players?.isNotEmpty == true
        ? fbBuilder.writeList(_players.map((b) => b.getOrCreateOffset(fbBuilder)).toList())
        : null;

    fbBuilder.startTable();
    if (hostOffset != null) {
      fbBuilder.addOffset(0, hostOffset);
    }
    if (playersOffset != null) {
      fbBuilder.addOffset(1, playersOffset);
    }
    fbBuilder.addBool(2, _canStart);
    fbBuilder.addBool(3, _canJoin);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String fileIdentifier]) {
    fb.Builder fbBuilder = new fb.Builder();
    int offset = finish(fbBuilder);
    return fbBuilder.finish(offset, fileIdentifier);
  }
}
class UserIDs {
  UserIDs._(this._bc, this._bcOffset);
  factory UserIDs(List<int> bytes) {
    fb.BufferContext rootRef = new fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<UserIDs> reader = const _UserIDsReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<String> get ids => const fb.ListReader<String>(const fb.StringReader()).vTableGet(_bc, _bcOffset, 4, null);

  @override
  String toString() {
    return 'UserIDs{ids: $ids}';
  }
}

class _UserIDsReader extends fb.TableReader<UserIDs> {
  const _UserIDsReader();

  @override
  UserIDs createObject(fb.BufferContext bc, int offset) => 
    new UserIDs._(bc, offset);
}

class UserIDsBuilder {
  UserIDsBuilder(this.fbBuilder) {
    assert(fbBuilder != null);
  }

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable();
  }

  int addIdsOffset(int offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class UserIDsObjectBuilder extends fb.ObjectBuilder {
  final List<String> _ids;

  UserIDsObjectBuilder({
    List<String> ids,
  })
      : _ids = ids;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(
    fb.Builder fbBuilder) {
    assert(fbBuilder != null);
    final int idsOffset = _ids?.isNotEmpty == true
        ? fbBuilder.writeList(_ids.map((b) => fbBuilder.writeString(b)).toList())
        : null;

    fbBuilder.startTable();
    if (idsOffset != null) {
      fbBuilder.addOffset(0, idsOffset);
    }
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String fileIdentifier]) {
    fb.Builder fbBuilder = new fb.Builder();
    int offset = finish(fbBuilder);
    return fbBuilder.finish(offset, fileIdentifier);
  }
}
class SimpleInfo {
  SimpleInfo._(this._bc, this._bcOffset);
  factory SimpleInfo(List<int> bytes) {
    fb.BufferContext rootRef = new fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<SimpleInfo> reader = const _SimpleInfoReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String get info => const fb.StringReader().vTableGet(_bc, _bcOffset, 4, null);

  @override
  String toString() {
    return 'SimpleInfo{info: $info}';
  }
}

class _SimpleInfoReader extends fb.TableReader<SimpleInfo> {
  const _SimpleInfoReader();

  @override
  SimpleInfo createObject(fb.BufferContext bc, int offset) => 
    new SimpleInfo._(bc, offset);
}

class SimpleInfoBuilder {
  SimpleInfoBuilder(this.fbBuilder) {
    assert(fbBuilder != null);
  }

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable();
  }

  int addInfoOffset(int offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class SimpleInfoObjectBuilder extends fb.ObjectBuilder {
  final String _info;

  SimpleInfoObjectBuilder({
    String info,
  })
      : _info = info;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(
    fb.Builder fbBuilder) {
    assert(fbBuilder != null);
    final int infoOffset = fbBuilder.writeString(_info);

    fbBuilder.startTable();
    if (infoOffset != null) {
      fbBuilder.addOffset(0, infoOffset);
    }
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String fileIdentifier]) {
    fb.Builder fbBuilder = new fb.Builder();
    int offset = finish(fbBuilder);
    return fbBuilder.finish(offset, fileIdentifier);
  }
}
class ActivePlayerIndex {
  ActivePlayerIndex._(this._bc, this._bcOffset);
  factory ActivePlayerIndex(List<int> bytes) {
    fb.BufferContext rootRef = new fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ActivePlayerIndex> reader = const _ActivePlayerIndexReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get index => const fb.Int8Reader().vTableGet(_bc, _bcOffset, 4, 0);

  @override
  String toString() {
    return 'ActivePlayerIndex{index: $index}';
  }
}

class _ActivePlayerIndexReader extends fb.TableReader<ActivePlayerIndex> {
  const _ActivePlayerIndexReader();

  @override
  ActivePlayerIndex createObject(fb.BufferContext bc, int offset) => 
    new ActivePlayerIndex._(bc, offset);
}

class ActivePlayerIndexBuilder {
  ActivePlayerIndexBuilder(this.fbBuilder) {
    assert(fbBuilder != null);
  }

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable();
  }

  int addIndex(int index) {
    fbBuilder.addInt8(0, index);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ActivePlayerIndexObjectBuilder extends fb.ObjectBuilder {
  final int _index;

  ActivePlayerIndexObjectBuilder({
    int index,
  })
      : _index = index;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(
    fb.Builder fbBuilder) {
    assert(fbBuilder != null);

    fbBuilder.startTable();
    fbBuilder.addInt8(0, _index);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String fileIdentifier]) {
    fb.Builder fbBuilder = new fb.Builder();
    int offset = finish(fbBuilder);
    return fbBuilder.finish(offset, fileIdentifier);
  }
}
class FriendItemInfo {
  FriendItemInfo._(this._bc, this._bcOffset);
  factory FriendItemInfo(List<int> bytes) {
    fb.BufferContext rootRef = new fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<FriendItemInfo> reader = const _FriendItemInfoReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String get userID => const fb.StringReader().vTableGet(_bc, _bcOffset, 4, null);
  bool get online => const fb.BoolReader().vTableGet(_bc, _bcOffset, 6, false);
  bool get invitable => const fb.BoolReader().vTableGet(_bc, _bcOffset, 8, false);
  String get statusText => const fb.StringReader().vTableGet(_bc, _bcOffset, 10, null);
  String get color => const fb.StringReader().vTableGet(_bc, _bcOffset, 12, null);

  @override
  String toString() {
    return 'FriendItemInfo{userID: $userID, online: $online, invitable: $invitable, statusText: $statusText, color: $color}';
  }
}

class _FriendItemInfoReader extends fb.TableReader<FriendItemInfo> {
  const _FriendItemInfoReader();

  @override
  FriendItemInfo createObject(fb.BufferContext bc, int offset) => 
    new FriendItemInfo._(bc, offset);
}

class FriendItemInfoBuilder {
  FriendItemInfoBuilder(this.fbBuilder) {
    assert(fbBuilder != null);
  }

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable();
  }

  int addUserIDOffset(int offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addOnline(bool online) {
    fbBuilder.addBool(1, online);
    return fbBuilder.offset;
  }
  int addInvitable(bool invitable) {
    fbBuilder.addBool(2, invitable);
    return fbBuilder.offset;
  }
  int addStatusTextOffset(int offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addColorOffset(int offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class FriendItemInfoObjectBuilder extends fb.ObjectBuilder {
  final String _userID;
  final bool _online;
  final bool _invitable;
  final String _statusText;
  final String _color;

  FriendItemInfoObjectBuilder({
    String userID,
    bool online,
    bool invitable,
    String statusText,
    String color,
  })
      : _userID = userID,
        _online = online,
        _invitable = invitable,
        _statusText = statusText,
        _color = color;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(
    fb.Builder fbBuilder) {
    assert(fbBuilder != null);
    final int userIDOffset = fbBuilder.writeString(_userID);
    final int statusTextOffset = fbBuilder.writeString(_statusText);
    final int colorOffset = fbBuilder.writeString(_color);

    fbBuilder.startTable();
    if (userIDOffset != null) {
      fbBuilder.addOffset(0, userIDOffset);
    }
    fbBuilder.addBool(1, _online);
    fbBuilder.addBool(2, _invitable);
    if (statusTextOffset != null) {
      fbBuilder.addOffset(3, statusTextOffset);
    }
    if (colorOffset != null) {
      fbBuilder.addOffset(4, colorOffset);
    }
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String fileIdentifier]) {
    fb.Builder fbBuilder = new fb.Builder();
    int offset = finish(fbBuilder);
    return fbBuilder.finish(offset, fileIdentifier);
  }
}
class RequestHigherLowerChoiceInfo {
  RequestHigherLowerChoiceInfo._(this._bc, this._bcOffset);
  factory RequestHigherLowerChoiceInfo(List<int> bytes) {
    fb.BufferContext rootRef = new fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<RequestHigherLowerChoiceInfo> reader = const _RequestHigherLowerChoiceInfoReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get value => const fb.Int8Reader().vTableGet(_bc, _bcOffset, 4, 0);

  @override
  String toString() {
    return 'RequestHigherLowerChoiceInfo{value: $value}';
  }
}

class _RequestHigherLowerChoiceInfoReader extends fb.TableReader<RequestHigherLowerChoiceInfo> {
  const _RequestHigherLowerChoiceInfoReader();

  @override
  RequestHigherLowerChoiceInfo createObject(fb.BufferContext bc, int offset) => 
    new RequestHigherLowerChoiceInfo._(bc, offset);
}

class RequestHigherLowerChoiceInfoBuilder {
  RequestHigherLowerChoiceInfoBuilder(this.fbBuilder) {
    assert(fbBuilder != null);
  }

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable();
  }

  int addValue(int value) {
    fbBuilder.addInt8(0, value);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class RequestHigherLowerChoiceInfoObjectBuilder extends fb.ObjectBuilder {
  final int _value;

  RequestHigherLowerChoiceInfoObjectBuilder({
    int value,
  })
      : _value = value;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(
    fb.Builder fbBuilder) {
    assert(fbBuilder != null);

    fbBuilder.startTable();
    fbBuilder.addInt8(0, _value);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String fileIdentifier]) {
    fb.Builder fbBuilder = new fb.Builder();
    int offset = finish(fbBuilder);
    return fbBuilder.finish(offset, fileIdentifier);
  }
}
class SocketMessage {
  SocketMessage._(this._bc, this._bcOffset);
  factory SocketMessage(List<int> bytes) {
    fb.BufferContext rootRef = new fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<SocketMessage> reader = const _SocketMessageReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  MessageType get type => new MessageType.fromValue(const fb.Int8Reader().vTableGet(_bc, _bcOffset, 4, 0));
  AnyTypeId get jsonType => new AnyTypeId.fromValue(const fb.Uint8Reader().vTableGet(_bc, _bcOffset, 6, 0));
  dynamic get json {
    switch (jsonType?.value) {
      case 1: return Card.reader.vTableGet(_bc, _bcOffset, 8, null);
      case 2: return Tower.reader.vTableGet(_bc, _bcOffset, 8, null);
      case 3: return CardIDs.reader.vTableGet(_bc, _bcOffset, 8, null);
      case 4: return HigherLowerChoice.reader.vTableGet(_bc, _bcOffset, 8, null);
      case 5: return DealTowerInfo.reader.vTableGet(_bc, _bcOffset, 8, null);
      case 6: return SecondDealTowerInfo.reader.vTableGet(_bc, _bcOffset, 8, null);
      case 7: return PlayFromHandInfo.reader.vTableGet(_bc, _bcOffset, 8, null);
      case 8: return DiscardInfo.reader.vTableGet(_bc, _bcOffset, 8, null);
      case 9: return DrawInfo.reader.vTableGet(_bc, _bcOffset, 8, null);
      case 10: return PickUpPileInfo.reader.vTableGet(_bc, _bcOffset, 8, null);
      case 11: return Hand.reader.vTableGet(_bc, _bcOffset, 8, null);
      case 12: return TowerCardsToHandInfo.reader.vTableGet(_bc, _bcOffset, 8, null);
      case 13: return FinalDealInfo.reader.vTableGet(_bc, _bcOffset, 8, null);
      case 14: return HandSwapInfo.reader.vTableGet(_bc, _bcOffset, 8, null);
      case 15: return LoginCredentials.reader.vTableGet(_bc, _bcOffset, 8, null);
      case 16: return PlayerEntry.reader.vTableGet(_bc, _bcOffset, 8, null);
      case 17: return LobbyInfo.reader.vTableGet(_bc, _bcOffset, 8, null);
      case 18: return UserIDs.reader.vTableGet(_bc, _bcOffset, 8, null);
      case 19: return SimpleInfo.reader.vTableGet(_bc, _bcOffset, 8, null);
      case 20: return ActivePlayerIndex.reader.vTableGet(_bc, _bcOffset, 8, null);
      case 21: return FriendItemInfo.reader.vTableGet(_bc, _bcOffset, 8, null);
      case 22: return RequestHigherLowerChoiceInfo.reader.vTableGet(_bc, _bcOffset, 8, null);
      default: return null;
    }
  }

  @override
  String toString() {
    return 'SocketMessage{type: $type, jsonType: $jsonType, json: $json}';
  }
}

class _SocketMessageReader extends fb.TableReader<SocketMessage> {
  const _SocketMessageReader();

  @override
  SocketMessage createObject(fb.BufferContext bc, int offset) => 
    new SocketMessage._(bc, offset);
}

class SocketMessageBuilder {
  SocketMessageBuilder(this.fbBuilder) {
    assert(fbBuilder != null);
  }

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable();
  }

  int addType(MessageType type) {
    fbBuilder.addInt8(0, type?.value);
    return fbBuilder.offset;
  }
  int addJsonType(AnyTypeId jsonType) {
    fbBuilder.addUint8(1, jsonType?.value);
    return fbBuilder.offset;
  }
  int addJsonOffset(int offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class SocketMessageObjectBuilder extends fb.ObjectBuilder {
  final MessageType _type;
  final AnyTypeId _jsonType;
  final dynamic _json;

  SocketMessageObjectBuilder({
    MessageType type,
    AnyTypeId jsonType,
    dynamic json,
  })
      : _type = type,
        _jsonType = jsonType,
        _json = json;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(
    fb.Builder fbBuilder) {
    assert(fbBuilder != null);
    final int jsonOffset = _json?.getOrCreateOffset(fbBuilder);

    fbBuilder.startTable();
    fbBuilder.addInt8(0, _type?.value);
    fbBuilder.addUint8(1, _jsonType?.value);
    if (jsonOffset != null) {
      fbBuilder.addOffset(2, jsonOffset);
    }
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String fileIdentifier]) {
    fb.Builder fbBuilder = new fb.Builder();
    int offset = finish(fbBuilder);
    return fbBuilder.finish(offset, fileIdentifier);
  }
}
